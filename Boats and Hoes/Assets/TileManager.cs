// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;
using System.Xml;

namespace Game
{
	public class TileManager
	{
		Tile m_startingTile;
		List<Tile> m_gameTiles;
		Queue<Tile> m_unusedTiles;
		List<Tile> m_placedTiles;
		List<Tile> m_openSpaceTiles;

		public TileManager()
		{
			XmlDocument xml = XMLReader.Read("Tiles");
			int tileID = 0;
			// Tiles
			foreach (XmlNode tileNode in xml.DocumentElement.ChildNodes)
			{
				Tile newTile = new Tile(tileID);
				uint edgeCount = 0;

				foreach (XmlNode childNode in tileNode.ChildNodes)
				{
					if (childNode.Name == "edge")
					{
						if (edgeCount >= (uint)Edge.EdgeType.MAX_EDGES)
						{
							Console.Error.WriteLine("Too many edges defined for tile %d in xml", tileID);
							break;
						}

						Edge newEdge = new Edge(newTile, (Edge.EdgeType)edgeCount);

						int segIdx = 0;
						foreach (XmlNode segNode in childNode)
						{
							Feature.FeatureType featureType = (Feature.FeatureType)Enum.Parse(typeof(Feature.FeatureType), segNode.Attributes["feature"].InnerText);
							int featureID = int.Parse(segNode.Attributes["id"].InnerText);
							Segment seg = new Segment(featureType, featureID);
							newEdge.SetSegment(segIdx++, seg);
						}
						newTile.SetEdge(newEdge.GetEdgeType(), newEdge);
						edgeCount++;
					} else if (childNode.Name == "placementPoint")
					{
					} else if (childNode.Name == "texture")
					{
						newTile.SetTexture(childNode.Attributes["name"].InnerText);
					}
				}

				if (tileID == 0)
				{
					m_startingTile = newTile;
				} else
				{
					m_gameTiles.Add(newTile);
				}
				tileID++;
			}
		}

		public void NewGame()
		{
			m_unusedTiles.Clear();
			m_placedTiles.Clear();
			m_openSpaceTiles.Clear();

			ShuffleTiles();
			foreach (Tile tile in m_gameTiles)
			{
				m_unusedTiles.Enqueue(tile);
			}
		}

		public void ShuffleTiles()
		{
			for (int i = 0; i < m_gameTiles.Count; ++i)
			{
				int swapIndex = UnityEngine.Random.Range(i + 1, m_gameTiles.Count);
				Tile temp = m_gameTiles[i];
				m_gameTiles[i] = m_gameTiles[swapIndex];
				m_gameTiles[swapIndex] = temp;
			}
		}

		public Tile GetNextTile()
		{
			return m_unusedTiles.Dequeue();
		}

		public void PlaceTile(Tile tile, Vector2 pos)
		{
			//TODO
		}

		public void GetPossiblePlacements(Tile tile)
		{
			foreach (Tile openSpace in m_openSpaceTiles)
			{
				//TODO
			}
		}
	}
}

